openapi: 3.0.0
info:
  version: '1.0'
  title: "Daytrip API collection"
  description: Daytrip API collection.
  license:
    name: TO BE DECIDED
servers:
  - url: http://assignments-api.herokuapp.com.com/api/v1
    description: Heroku instance
  - url: http://localhost:6868/api/v1
    description: User DB Adapter
  - url: http://localhost:6869/api/v1
    description: Destination DB Adapter
  - url: https://{service1}
    description: Production server
    variables:
      service1:
        default: prova
paths:
  /{service1/users:
    post:
      description: >-
        Creates a new user in the system.
      summary: Create a new user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
              properties:
                username:
                  type: string
                  description: 'Username of the user'
                email:
                  type: string
                  description: 'Email address of the user'
      responses:
        '201':
          description: 'The created user'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/{id}:
    get:
      description: >-
        Gets information about a specific user, identified by an ID
      summary: Get a user
      parameters:
        - name: id
          in: path
          required: true
          description: 'ID of the requested user'
      responses:
        '200':
          description: 'The user corresponding to the input ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /assignments:
    post:
      description: >-
        Creates an assignment.
      summary: Create an assignment
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - deadline
                - status
              properties:
                name:
                  type: string
                  description: 'Name for the assignment'
                deadline:
                  type: string
                  description: 'Datetime of the deadline in ISO 8601 format'
                status:
                  type: string
                  enum: [open, closed]
                  description: 'Defined whether the assignment is open for replies or not'
      responses:
        '201':
          description: 'The created assignment'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assignment'
    get:
      description: >-
        Gets the list of assignments. Optionally, you can pass the ID of the user as a parameter.
        If the passed user is a teacher, then the list represents assignments that the teacher has created;
        if it is a student, then the list represents the assignments they have to complete.
      summary: Get assignments
      responses:
        '200':
          description: 'Collection of assignments'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Assignment'
      parameters:
        - in: query
          name: userId
          description: 'Optional parameter. The user ID is used to restrict the results of the request'
  /assignments/{id}:
    get:
      description: >-
        Gets information about a specific assignment
      summary: Get an assignment
      responses:
        '200':
          description: 'The assignment corresponding to the input ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assignment'
      parameters:
        - name: id
          in: path
          required: true
          description: 'ID of the requested assignment'
    put:
      description: >-
        Updates a specific assignment, changing properties like its name, the status (open/closed),
        and the list of tasks. In the request, send only the fields that you want to change.
      summary: Update assignment
      responses:
        '200':
          description: 'The updated assignment'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assignment'
      parameters:
        - name: id
          in: path
          required: true
          description: 'ID of the assignment to modify'
    delete:
      description: >-
        Deletes an assignment.
      summary: Delete an assignment
      responses:
        '204':
          description: ''
      parameters:
        - name: id
          in: path
          required: true
          description: 'ID of the assignment to delete'
  /marks:
    post:
      description: >-
        Gives a mark for an assignment made by a student.
      summary: Give a mark
      responses:
        '201':
          description: ''
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Mark'
    get:
      description: >-
        Gets marks. It is possible to get the marks for all the assignments a user has taken,
        or the mark for a specific exam.
      summary: Get marks
      responses:
        '200':
          description: 'A collection of marks'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
      parameters:
        - in: query
          name: userId
        - in: query
          name: assignmentId
          
components:
  schemas:
    User:
      type: object
      required:
        - id
        - username
        - email
      properties:
        id:
          type: integer
          description: 'ID of the user'
        username:
          type: string
          description: 'Username of the user'
        email:
          type: string
          description: 'Email address of the user'
    Assignment:
      type: object
      required:
        - name
        - deadline
        - status
      properties:
        name:
          type: string
          description: 'Name for the assignment'
        deadline:
          type: string
          description: 'Datetime of the deadline in ISO 8601 format'
        status:
          type: string
          enum: [open, closed]
          description: 'Defined whether the assignment is open for replies or not'
    Mark:
      type: object
      required:
      - userId
      - assignmentId
      - mark
      properties:
        userId:
          type: integer
          description: 'ID of the user the mark has been given to'
        assignmentId:
          type: integer
          description: 'ID of the assignment'
        mark:
          type: string
          description: 'The given mark value'
        text:
          type: string
          description: 'Comment associated to the mark'